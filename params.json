{"name":"IITM-Netaccess","tagline":"Cross platform app for automatic netaccess login at IIT Madras","body":"iitm-netaccess\r\n==============\r\nCross-platform app for automated netaccess login at IIT Madras, built with [Electron](http://electron.atom.io).  \r\n(Android/Windows/iOS apps coming very soon)\r\nFeatures:\r\n\r\n1. One time username and password input\r\n2. Just open the app next time to login automatically\r\n3. Add to start-up programs list to login everytime time you start the computer\r\n\r\nRoadmap:\r\n\r\n1. Automatic relogin after 24 hours\r\n2. Usage reporting\r\n3. Listing of authenticated devices\r\n\r\n#For Developers:\r\n\r\nThis project gives you mainly three things:\r\n\r\n1. Cross-platform development environment (works the same way on OSX, Windows and Linux).\r\n2. Basic structure for Electron app.\r\n3. Scripts to generate installers of your app for all three operating systems.\r\n\r\nBy the way, there is a twin project to this one: [nw-boilerplate](https://github.com/szwacz/nw-boilerplate), which is the same thing but for NW.js.\r\n\r\n# Quick start\r\nThe only development dependency of this project is [Node.js](https://nodejs.org). So just make sure you have it installed.\r\nThen type few commands known to every Node developer...\r\n```\r\ngit clone https://github.com/shahidhk/iitm-netaccess.git\r\ncd iitm-netaccess\r\nnpm install\r\nnpm start\r\n```\r\n... and boom! You have running desktop application on your screen.\r\n\r\n# Structure of the project\r\n\r\nThere are **two** `package.json` files:  \r\n\r\n#### 1. For development\r\nSits on path: `iitm-netaccess/package.json`. Here you declare dependencies for your development environment and build scripts. **This file is not distributed with real application!**\r\n\r\nAlso here you declare wersion of Electron runtime you want to use:\r\n```json\r\n\"devDependencies\": {\r\n  \"electron-prebuilt\": \"^0.24.0\"\r\n}\r\n```\r\n\r\n#### 2. For your application\r\nSits on path: `iitm-netaccess/app/package.json`. This is **real** manifest of your application. Declare your app dependencies here.\r\n\r\n### Project's folders\r\n\r\n- `app` - code of your application goes here.\r\n- `config` - place for you to declare environment specific stuff.\r\n- `build` - in this folder lands built, runnable application.\r\n- `releases` - ready for distribution installers will land here.\r\n- `resources` - resources for particular operating system.\r\n- `tasks` - build and development environment scripts.\r\n\r\n\r\n# Development\r\n\r\n#### Installation\r\n\r\n```\r\nnpm install\r\n```\r\nIt will also download Electron runtime, and install dependencies for second `package.json` file inside `app` folder.\r\n\r\n#### Starting the app\r\n\r\n```\r\nnpm start\r\n```\r\n\r\n#### Module loader\r\n\r\nHow about splitting your JavaScript code into modules? This project supports it by new ES6 syntax (thanks to [esperanto](https://github.com/esperantojs/esperanto)). ES6 modules are translated into AMD (RequireJS) modules. The main advantage of this setup is that you can use ES6/RequireJS for your own modules, and at the same time have normal access to node's `require()` to obtain stuff from npm.\r\n```javascript\r\n// Modules you write are required through new ES6 syntax\r\n// (It will be translated into AMD definition).\r\nimport myOwnModule from './my_own_module';\r\n// Node.js (npm) modules are required the same way as always\r\n// (so you can still access all the goodness in npm).\r\nvar moment = require('moment');\r\n```\r\n\r\n#### Unit tests\r\n\r\niitm-netaccess has preconfigured [jasmine](http://jasmine.github.io/2.0/introduction.html) unit test runner. To run it go with standard:\r\n```\r\nnpm test\r\n```\r\nYou don't have to declare paths to spec files in any particular place. The runner will search through the project for all `*.spec.js` files and include them automatically.\r\n\r\n\r\n# Making a release\r\n\r\n**Note:** There are various icon and bitmap files in `resources` directory. Those are used in installers and are intended to be replaced by your own graphics.\r\n\r\nTo make ready for distribution installer use command:\r\n```\r\nnpm run release\r\n```\r\nIt will start the packaging process for operating system you are running this command on. Ready for distribution file will be outputted to `releases` directory.\r\n\r\nYou can create Windows installer only when running on Windows, the same is true for Linux and OSX. So to generate all three installers you need all three operating systems.\r\n\r\n\r\n## Special precautions for Windows\r\nAs installer [NSIS](http://nsis.sourceforge.net/Main_Page) is used. You have to install it (version 3.0), and add NSIS folder to PATH in Environment Variables, so it is reachable to scripts in this project (path should look something like `C:/Program Files (x86)/NSIS`).\r\n\r\n\r\n# License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Shahidh K Muhammed\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.","google":"UA-49243395-3","note":"Don't delete this file! It's used internally to help with page regeneration."}